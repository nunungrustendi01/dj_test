name: Django CI/CD

on:
  push:
    branches:
      - main

env:
  REGISTRY: ${{ secrets.DHUB_REGISTRY }}
  IMAGE_NAME: dj_test # ${{ github.repository }}
  STACK_NAME: dj_test

jobs:
  checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    #- name : Lint
    #  run : black --check .

    - name: Run Tests
      env:
        SECRET_KEY: ${{ secrets.CI_SECRET_KEY }}
      run: |
        cd dj_test
        python manage.py test

  #-- build and push to Dockerhub
  build:
    runs-on: ubuntu-latest
    needs: [checks]
    if: github.ref == 'refs/heads/main'
    outputs:
      GITHUB_SHA_SHORT: ${{ steps.sha7.outputs.GITHUB_SHA_SHORT }}

    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        id: sha7
        run: |
          GITHUB_SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA_SHORT}" >> $GITHUB_ENV
          echo "::set-output name=GITHUB_SHA_SHORT::${GITHUB_SHA_SHORT}"

      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DHUB_USERNAME }}
          password: ${{ secrets.DHUB_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          docker compose -f deployment/docker-compose.ci.yaml build
          docker compose -f deployment/docker-compose.ci.yaml push
  
  #-- deploy on VPS
  deploy:
    runs-on: ubuntu-latest
    needs: [checks, build]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: deployment
    env:
      GITHUB_SHA_SHORT: ${{ needs.build.outputs.GITHUB_SHA_SHORT }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        working-directory: .
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect static
        working-directory: dj_test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: python manage.py collectstatic --noinput

      - name: Set environment variables in .env
        run: |
          echo 'DEBUG=0' >> .env
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
          echo 'REDIS_URI=${{ secrets.REDIS_URI }}' >> .env

      - name: Transfer static files to the Swarm manager
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SWARM_MANAGER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          overwrite: true
          # scp-action doesn't obey working-directory, runs at repo root
          source: "dj_test/static/"
          target: "/usr/src/dj_test_user/${{ env.IMAGE_NAME }}"
          strip_components: 1

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa ${{ secrets.SWARM_MANAGER_IP }} >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      #-- ssh to vps then login to dockerhub
      - name: Bring up deployment
        env:
          DOCKER_HOST: ssh://${{ secrets.SSH_USER }}@${{ secrets.SWARM_MANAGER_IP }}

        
        run: |
          echo "Logging in to DockerHub packages..."
          #-- login to dockerhub by reading password
          echo ${{ secrets.DHUB_TOKEN }} | docker login -u ${{ secrets.DHUB_USERNAME }} --password-stdin

          echo "Bringing up deployment..."
          docker stack deploy --prune --with-registry-auth -c docker-compose.prod.yaml ${{ env.STACK_NAME }}

          echo "Waiting for deployment..."
          sleep 30
          ./docker-stack-wait.sh -t 300 ${{ env.STACK_NAME }}

          echo "Running migrations..."
          # TODO: It would be better to use docker-compose against the django service,
          # but there is currently a bug in docker-compose preventing running services
          # over an SSH host.
          IMAGE=${REGISTRY}/${IMAGE_NAME}/dj_test:${GITHUB_SHA_SHORT}
          docker run --rm --env-file .env ${IMAGE} python manage.py migrate